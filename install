--This inatalls the nessessary files for the computer type given
local args = {...}
local forse = false;




function argErr() 
  error("Usage: "..shell.getRunningProgram().." <computer type> [-f] \n Valid computer types include: yardmaster, infoboard, ticketmaster, loadingplatform \n Options: \n -f: forse.  This will overwrite any settings files or unchanging files with either the defaults or the files linked in the install.conf file")
end -- function 

if #args == 0 then
  local installConf = fs.open( "install.conf", "r" )
  if installConf then 
    confFile = textutils.unserialize( installConf.readAll() )
    installConf.close()
    args[1] = confFile.computerType
    -- make sure both conf files are linked (if applicable)
    if (confFile.computerType == "yardmaster" or confFile.computerType == "ticketmaster") and (confFile.junctionsURL ~= nil and confFile.settingsURL ~= nil) then 
      
        args[2] = "-f"
        
    else
      if confFile.settingsURL ~= nil then
        args[2] = "-f"
      end
    end 
    
    
  end 
  
end


if #args ~= 1 and #args ~= 2 then
  argErr()
end

if args[2] ~=nil and args[2] == "-f" then 
  forse = true
end --if

-- install configuration manager 
local confFile = {}

local installConf = fs.open( "install.conf", "r" )

if installConf == nil then -- create the file and ask for configs
  confFile.computerType = args[1]
	
	print("This install script can use your own configuration when updating.ï¿¼")
	print("To enable this feature please provide the raw links to your config files below.  (E.X. pastebin.com/raw/qwAH5FD)")
  
	if confFile.computerType == "yardmaster" or confFile.computerType == "ticketmaster" then  -- Only show for ticketmaster and yardmaster
	  print("    direct url to your junctions.lua file")
    confFile.junctionsURL = read()
	  if confFile.junctionsURL == nil or confFile.junctionsURL == "" then 
		  confFile.junctionsURL = nil
    end
  end
  
  print("    direct url to your settings.lua file")
	confFile.settingsURL = read()
	if confFile.settingsURL == nil or confFile.settingsURL == "" then 
		confFile.settingsURL = nil
	end
  
  print("You can edit this later in the file: install.conf ")

  local installConf = fs.open( "install.conf", "w" )
  installConf.write(textutils.serialize(confFile))
  installConf.close()
	
else -- file exists
  confFile = textutils.unserialize( installConf.readAll() )
  installConf.close()
end -- if




function download(url, file)
    local content = http.get(url)
    if content == nil then 
      error(file .. " is not found at " .. url )
    end
    content = content.readAll()
    if not content then
      error("Could not connect to the internet")
    end
    f = fs.open(file, "w")
    f.write(content)
    f.close()
end

local files = {
  scripts={
    updateall={url="https://raw.githubusercontent.com/poster983/rail-manager-computercraft/master/update", name="update"},
  },
  globals={
    queue={url="https://raw.githubusercontent.com/poster983/rail-manager-computercraft/master/globals/Queue.lua", name="Queue.lua"},
    common={url="https://raw.githubusercontent.com/poster983/rail-manager-computercraft/master/globals/common.lua", name="common.lua"},
    junctions={url="https://raw.githubusercontent.com/poster983/rail-manager-computercraft/master/globals/junctions.lua", name="junctions.lua"},
    brain={url="https://raw.githubusercontent.com/poster983/rail-manager-computercraft/master/globals/brain.lua", name="brain.lua"},
    yard={url="https://raw.githubusercontent.com/poster983/rail-manager-computercraft/master/globals/Yard.lua", name="Yard.lua"},
  },
  ticketmaster={
    startup={url="https://raw.githubusercontent.com/poster983/rail-manager-computercraft/master/stations/ticketmaster/startup.lua", name="startup.lua"},
    settings={url="https://raw.githubusercontent.com/poster983/rail-manager-computercraft/master/stations/ticketmaster/settings.lua", name="settings.lua"},
    screen={url="https://raw.githubusercontent.com/poster983/rail-manager-computercraft/master/stations/ticketmaster/screen.lua", name="screen.lua"},
    button={url="https://raw.githubusercontent.com/poster983/rail-manager-computercraft/master/stations/ticketmaster/button", name="button"},
  },
  loadingplatform={
    settings={url="https://raw.githubusercontent.com/poster983/rail-manager-computercraft/master/loadingplatform/settings.lua", name="settings.lua"},
    startup={url="https://raw.githubusercontent.com/poster983/rail-manager-computercraft/master/loadingplatform/startup.lua", name="startup.lua"},
  },
  infoboard={
    settings={url="https://raw.githubusercontent.com/poster983/rail-manager-computercraft/master/stations/infoboards/settings.lua", name="settings.lua"},
    startup={url="https://raw.githubusercontent.com/poster983/rail-manager-computercraft/master/stations/infoboards/startup.lua", name="startup.lua"},
  },
  yardmaster={
    settings={url="https://raw.githubusercontent.com/poster983/rail-manager-computercraft/master/yard/settings.lua", name="settings.lua"},
    startup={url="https://raw.githubusercontent.com/poster983/rail-manager-computercraft/master/yard/startup.lua", name="startup.lua"},
  },
}

--override the links with the user defined links:
if confFile.junctionsURL ~= nil then 
	files.globals.junctions.url = confFile.junctionsURL
end --if

if confFile.settingsURL ~= nil then 
	files.ticketmaster.settings.url = confFile.settingsURL
	files.loadingplatform.settings.url = confFile.settingsURL
	files.infoboard.settings.url = confFile.settingsURL
	files.yardmaster.settings.url = confFile.settingsURL
end --if


local computerTypes = {
    ticketmaster={
      {file=files.ticketmaster.startup},
      {file=files.ticketmaster.settings, dontUpdate=true},
      {file=files.ticketmaster.screen},
      {file=files.ticketmaster.button, dontUpdate=true},
      {file=files.globals.queue},
      {file=files.globals.common},
      {file=files.globals.junctions, dontUpdate=true},
      {file=files.globals.brain},
      {file=files.globals.yard},
      {file=files.scripts.updateall},
    },
    loadingplatform={
      {file=files.loadingplatform.startup},
      {file=files.loadingplatform.settings, dontUpdate=true},
      {file=files.globals.common},
      {file=files.scripts.updateall},
    },
    infoboard={
      {file=files.infoboard.startup},
      {file=files.infoboard.settings, dontUpdate=true},
      {file=files.globals.common},
      {file=files.globals.queue},
      {file=files.scripts.updateall},
    },
    yardmaster={
      {file=files.yardmaster.startup},
      {file=files.yardmaster.settings, dontUpdate=true},
      {file=files.globals.queue},
      {file=files.globals.common},
      {file=files.globals.junctions, dontUpdate=true},
      {file=files.globals.brain},
      {file=files.globals.yard},
      {file=files.scripts.updateall},
    }
}

if computerTypes[args[1]] == nil then -- error with computertype
  argErr()
end --if

--download files

for i,v in ipairs(computerTypes[args[1]]) do
    if fs.exists(v.file.name) and v.dontUpdate==true and forse==false then 
      print("Skipping. File: ".. v.file.name .." exists already.  Use the -f option to download")
    else 
      download(v.file.url, v.file.name);
      print("Downloaded: \""..v.file.name .."\"")
    end-- if
end

print("Done.  Reboot to run")

